{"version":3,"sources":["components/Notification/ServerError/ServerError.js","components/Notification/InputNotification/Notification.js","services/user.js","components/auth/register/Register.js","components/Notification/InputNotification/Notification.module.css","yupSchemaValidation/userValidation.js"],"names":["ServerError","serverError","useState","visible","setIsvisible","useEffect","timer","setTimeout","clearTimeout","className","Notification","props","style","errors","children","REACT_APP_BASE_URL","process","register","data","fetch","method","headers","credentials","body","JSON","stringify","then","res","json","login","logout","sendMessage","getUserMessages","userId","getAllMessagesForCurrentArticle","artId","senderId","deleteDiscussion","recieverId","uploadProfileImage","base64Enc","status","window","location","reload","loadImages","deleteImageHandler","id","Register","navigate","useNavigate","serverErr","setServerError","setUserData","useContext","UserContext","e","a","username","email","password","rePass","result","error","message","console","log","initialValues","validationSchema","userSchema","onSubmit","htmlFor","type","name","component","value","undefined","to","module","exports","emailRegex","yup","shape","min","max","required","matches","oneOf","userLoginSchema","sendMessageSchema","commentSchema","comment"],"mappings":"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","file":"static/js/14.79d26794.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nimport './ServerError.css'\r\n\r\nexport default function ServerError(serverError) {\r\n\r\n    const [visible, setIsvisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!serverError.serverError) {\r\n            setIsvisible(false)\r\n            return;\r\n        }\r\n        setIsvisible(true);\r\n        const timer = setTimeout(() => {\r\n            setIsvisible(false)\r\n        }, 5000)\r\n        return () => clearTimeout(timer);\r\n    }, [serverError])\r\n\r\n    return (\r\n        <>\r\n            {visible ? <p className=\"rgsServError\">{serverError.serverError}</p> : ''}\r\n        </>\r\n    )\r\n}\r\n","\r\nimport style from './Notification.module.css'\r\n\r\nexport default function Notification(props) {\r\n \r\n    \r\n    return (\r\n        <div className={style.errors}>\r\n            <p>{props.children}</p>\r\n        </div>\r\n    )\r\n}\r\n","const { REACT_APP_BASE_URL } = process.env;\r\n\r\nexport function register(data) {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    }).then(res => res.json());\r\n}\r\n\r\nexport function login(data) {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    }).then(res => res.json());\r\n}\r\nexport function logout() {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/logout`, {\r\n        method: 'GET',\r\n        credentials: 'include'\r\n    })\r\n}\r\n\r\nexport function sendMessage(data) {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/sendMessage`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    }).then(res => res.json());\r\n}\r\nexport function getUserMessages(userId) {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/getUserMessages/` + userId, {\r\n        credentials: 'include',\r\n    }).then(res => res.json());\r\n}\r\nexport function getAllMessagesForCurrentArticle(artId, senderId) {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/getAllMessagesForCurrentArticle/` + artId + \"/\" + senderId, {\r\n        credentials: 'include',\r\n    }).then(res => res.json());\r\n}\r\nexport function deleteDiscussion(artId, recieverId, senderId) {\r\n    return fetch(`${REACT_APP_BASE_URL}/auth/deleteDiscussion`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ artId, recieverId, senderId })\r\n    }).then(res => res.json());\r\n}\r\nexport function uploadProfileImage(base64Enc) {\r\n    return fetch(`${REACT_APP_BASE_URL}/upload/uploadUserImg`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ data: base64Enc })\r\n    }).then(res => res.json()).then(res =>\r\n        res.status === 200 ? window.location.reload() : \"\"\r\n    );\r\n}\r\nexport function loadImages() {\r\n    return fetch(`${REACT_APP_BASE_URL}/upload/loadImages`, {\r\n        method: 'GET',\r\n        credentials: 'include'\r\n    }).then(res => res.json());\r\n}\r\nexport function deleteImageHandler(id) {\r\n    return fetch(`${REACT_APP_BASE_URL}/upload/deleteImage/` + id, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include'\r\n    }).then(res => res.json()).then(res =>\r\n        res.status === 200 ? window.location.reload() : \"\"\r\n    );\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\n\r\nimport { userSchema } from '../../../yupSchemaValidation/userValidation';\r\nimport Notification from '../../Notification/InputNotification/Notification'\r\nimport ServerError from '../../Notification/ServerError';\r\n\r\nimport { register } from '../../../services/user';\r\nimport UserContext from '../../../context/UserDataContext';\r\n\r\nimport './Register.css';\r\n\r\nexport default function Register() {\r\n\r\n    const navigate = useNavigate();\r\n    const [serverErr, setServerError] = useState([]);\r\n    const { setUserData } = useContext(UserContext);\r\n\r\n    async function handleSubmit(e) {\r\n        const data = {\r\n            username: e.username,\r\n            email: e.email,\r\n            password: e.password,\r\n            rePass: e.rePass\r\n        }\r\n\r\n        try {\r\n            const result = await register(data);\r\n            if (result.status === 404) {\r\n                setServerError({ error: result.message })\r\n            } else {\r\n                setUserData(result);\r\n                navigate('/catalog');\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"register\">\r\n            <div className=\"register-box\">\r\n                <h1 className=\"register-box-title\">Register</h1>\r\n                <p className=\"register-untertitle\">Please fill in this form to create an account.</p>\r\n\r\n                <Formik\r\n                    initialValues={{\r\n                        username: '',\r\n                        email: '',\r\n                        password: '',\r\n                        rePass: ''\r\n                    }}\r\n                    validationSchema={userSchema}\r\n                    onSubmit={handleSubmit}>\r\n                    <Form className=\"register-form\" >\r\n                        <label htmlFor=\"username\">Name</label>\r\n                        <Field\r\n                            type=\"text\"\r\n                            id=\"text\"\r\n                            name=\"username\"\r\n                            data-testid=\"username\"\r\n                        />\r\n                        <ErrorMessage name=\"username\" component={Notification} />\r\n\r\n\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <Field\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            data-testid=\"email\"\r\n                        />\r\n                        <ErrorMessage name=\"email\" component={Notification} />\r\n\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <Field\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            data-testid=\"password\"\r\n                        />\r\n                        <ErrorMessage name=\"password\" component={Notification} />\r\n\r\n                        <label htmlFor=\"rePass\">Confirm-Password</label>\r\n                        <Field\r\n                            type=\"password\"\r\n                            id=\"rePass\"\r\n                            name=\"rePass\"\r\n                            data-testid=\"rePass\"\r\n                        />\r\n                        <ErrorMessage name=\"rePass\" component={Notification} />\r\n\r\n                        <input type=\"submit\" className=\"registerbtn\" value=\"Register\" />\r\n                    </Form>\r\n                </Formik>\r\n                {serverErr.error !== undefined ? <ServerError serverError={serverErr.error} /> : \"\"}\r\n                <div className=\"signin\">\r\n                    <p>Already have an account?<Link to=\"/login\">Sign in</Link>.</p>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errors\":\"Notification_errors__8Qw2T\"};","import * as yup from 'yup';\r\n\r\nconst emailRegex = /^[\\w-]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\r\n\r\nexport const userSchema = yup.object().shape({\r\n    username: yup.string().min(5).max(20).required('Username is required!'),\r\n    email: yup.string().email('Wrong email').matches(emailRegex, 'Invalid Email!').required('Email is required!'),\r\n    password: yup.string().min(4).max(15).required('Password is required!'),\r\n    rePass: yup.string().oneOf([yup.ref(\"password\"), null], 'Password must match!')\r\n})\r\n\r\nexport const userLoginSchema = yup.object().shape({\r\n    email: yup.string().email('Wrong email').matches(emailRegex, 'Invalid Email!').required('Email is required!'),\r\n    password: yup.string().min(4).max(15).required('Password is required!'),\r\n})\r\n\r\nexport const sendMessageSchema = yup.object().shape({\r\n    message: yup.string().min(10, 'Minimum 10 character!').max(500, 'Maximum 500 character!').required(''),\r\n})\r\nexport const commentSchema = yup.object().shape({\r\n    username: yup.string().min(4).max(15).required('Name is required!'),\r\n    comment: yup.string().min(5, 'Minimum 5 character!').max(500, 'Maximum 500 character!').required(''),\r\n})"],"sourceRoot":""}